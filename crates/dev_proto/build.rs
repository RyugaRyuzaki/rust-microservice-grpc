use std::fs::{self, File};
use std::io::Write;
use std::path::Path;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let proto_dir = "proto";
    let generated_dir = "src/generated";
    let lib_rs_path = "src/lib.rs";

    if !Path::new(generated_dir).exists() {
        fs::create_dir_all(generated_dir)?;
    }

    let mut proto_files = Vec::new();
    for entry in fs::read_dir(proto_dir)? {
        let entry = entry?;
        let path = entry.path();
        if path.extension().and_then(|s| s.to_str()) == Some("proto") {
            proto_files.push(path.to_str().unwrap().to_string());
        }
    }

    if proto_files.is_empty() {
        return Err("No .proto files found in proto directory".into());
    }

    tonic_build::configure()
        .build_server(true)
        .build_client(true)
        .out_dir(generated_dir)
        .compile_protos(&proto_files, &[proto_dir])?;
    let mut mod_rs = File::create(format!("{}/mod.rs", generated_dir))?;
    for entry in fs::read_dir(generated_dir)? {
        let entry = entry?;
        let path = entry.path();

        if path.extension().and_then(|s| s.to_str()) == Some("rs")
            && path.file_name().unwrap() != "mod.rs"
        {
            let filename = path.file_stem().unwrap().to_str().unwrap();
            writeln!(mod_rs, "pub mod {};", filename)?;
        }
    }

    let mut lib_rs = File::create(lib_rs_path)?;
    lib_rs.write_all(b"// THIS FILE IS AUTO-GENERATED BY build.rs\n")?;
    lib_rs.write_all(b"pub mod generated;\n")?;

    println!("cargo:rerun-if-changed=proto/");

    Ok(())
}
